class Solution {public:    int maxProfit(vector<int>& prices) {        vector<int> l, g;		l.push_back(0);		g.push_back(0);		int len = prices.size();		for (int i=1; i<len; i++)		{			int delta = prices[i] - prices[i-1];			int base = i >= 3? max(g[i-3], l[i-1]) : max(l[i-1], 0);			l.push_back(base + delta);			g.push_back(max(g[i-1], l[i]));		}				return g[len-1];    }};/* state machine */class Solution {public:    int maxProfit(vector<int>& prices) {		int len = prices.size();		if (len <= 0)		{			return 0;		}		        vector<int> s0, s1, s2;		s0.push_back(0);		s1.push_back(-prices[0]);		s2.push_back(INT_MIN);		for (int i=1; i<len; i++)		{			s0.push_back(max(s0[i-1], s2[i-1]));			s1.push_back(max(s0[i-1] - prices[i], s1[i-1]));			s2.push_back(s1[i-1] + prices[i]);		}				return max(s0[len-1], s2[len-1]);    }};/*test cases:[][1][3, 1][1, 3][2,4,2,5,6,2,6,3,6,4,9]*/